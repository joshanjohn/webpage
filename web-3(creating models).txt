
  CREATING MODELS
 =================

In our poll app, we’ll create two models: Question and Choice. 
A Question has a question and a publication date. 
A Choice has two fields: the text of the choice and a vote tally. 
Each Choice is associated with a Question.

These concepts are represented by Python classes. 

1. Edit the polls/models.py file so it looks like this:


from django.db import models


class Question(models.Model):
    question_text = models.CharField(max_length=200)
    pub_date = models.DateTimeField('date published')


class Choice(models.Model):
    question = models.ForeignKey(Question, on_delete=models.CASCADE)
    choice_text = models.CharField(max_length=200)
    votes = models.IntegerField(default=0)


  ACTIVATING MODELS
 ===================

That small bit of model code gives Django a lot of information. With it, Django is able to:

A)Create a database schema (CREATE TABLE statements) for this app.
B)Create a Python database-access API for accessing Question and Choice objects.
 
But first we need to tell our project that the polls app is installed.

1. To include the app in our project, we need to add a reference to its configuration class in the INSTALLED_APPS setting.

   so edit in installed_app with following codes:

INSTALLED_APPS = [
    'polls.apps.PollsConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

2. After editing return to cmd 
	type:
	    >python manage.py makemigrations polls

				#By running makemigrations, you’re telling Django that 
				  you’ve made some changes to your models

3. SQL Migration.
  The sqlmigrate command takes migration names and returns their SQL
	type:
	     >python manage.py sqlmigrate polls 0001 

4. Now, run migrate again to create those model tables in your database:

		type:
		     >python manage.py migrate










